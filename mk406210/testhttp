#!/bin/bash

if [ "$#" -ne 2 ]; then
    >&2 echo "ERROR: usage: ./testhttp <cookies file> <tested http address>";
fi

if [[ $2 =~ ^(https://)([^/?#]*)([/?#].*)? ]];
then
  base_address=${BASH_REMATCH[2]};
  is_secure=1;
elif [[ $2 =~ ^(http://)([^/?#]*)([/?#].*)? ]];
then
  base_address=${BASH_REMATCH[2]};
  is_secure=0;
else
  >&2 echo "ERROR: invalid http address";
  exit 1;
fi

[[ $2 =~ (://)(.*)? ]]

if [[ $base_address =~ (.*):([0-9]+) ]];
then
  address=${BASH_REMATCH[1]};
  port=${BASH_REMATCH[2]};
elif [[ $base_address =~ ^([^:]+)$ ]];
then
  address=$base_address;
  if [ $is_secure -eq 1 ]
  then
    port=443;
  else
    port=80;
  fi
else
  >&2 echo "ERROR: invalid http address";
  exit 1;
fi

if [ $is_secure -eq 0 ];
then
  ./testhttp_raw "$address":"$port" "$1" "$2"
else
  local_address="127.0.0.1";
  local_port=3000;

  for ((; local_port<=65000; local_port++))
  do
    (echo >/dev/tcp/$local_address/$local_port)> /dev/null 2>&1 || break;
  done

  config="pid=\nforeground=yes\n[service]\nclient = yes\naccept = $local_address:$local_port\nconnect = $address:$port";
  echo -e "$config" | stunnel -fd 0 &> /dev/null & export local_server_pid=$!;
  STNETSTAT=$(netstat -ntpl 2> /dev/null);
  while [[ ! "$STNETSTAT" =~ $local_address:$local_port ]];
  do
    STNETSTAT=$(netstat -ntpl 2> /dev/null);
  done
  ./testhttp_raw $local_address:$local_port "$1" "$2";
  kill -9 "$local_server_pid" &> /dev/null;
fi